************************** Introduction to Exception Handling in JAVA *********************************

> What is an Exception?
> Exceptions in Java are any abnormal, unexpected events or extraordinary conditions that may occur at runtime.

> There are 4 ways of handling exceptions in Java:
    > Default throw and default catch
    > Default throw and our catch 
    > Our throw and default catch
    > Our throw and our catch

> Exception Handling: Java exception handling is used to handle error conditions in a program systematically
  by taking the necessary action;

> Throwable is the superclass of every exception;

>> Throw and catch:
> Java exceptions are raised with the throw keyword and handled within a catch block;

> If we try to get the length of a string that has no reference that means it has null then it will throw 
  NullPointerException;

>> Throwable:

> The Throwable class provides a string variable that can be set by the subclasses to provide a detailed message
  that provides more information about the exception that occurred;

> All classes of Throwable define a one-parameter constructor that takes a string as the detail message;

> The class Throwable provides getMessage() function to retrieve an exception;


*************************** Unchecked Exception Handling in JAVA ***********************************

> In Java, exceptions are of two types:
> The class Exception represents exceptions that a program faces due to abnormal or special conditions during 
  execution;
> Exceptions can be of 2 types: Checked(Compile time Exceptions)/ Unchecked(Run time Exceptions);

>> Unchecked Exceptions:
> Unchecked exceptions are RuntimeException and any of its subclass;
> ArrayIndexOutOfBounds, NullPointerException and so on are all subclasses of the java.lang.RuntimeException
  class, which is a subclass of the Exception class;

>> Default throw and our catch: 
Syntax:

try {
    <code> // code which is suspected that can throw an exception
} catch (<exception type> <parameter>){
    ...
}
finally{
    ...
}

e.g:
class Example{
  public static void main(String[] args){
    try{
      System.out.println(3/0);
      System.out.println("In try block");
    }
    catch(ArithmeticException e){
      System.our.println("Exeception: "+e.getMessage());
    }
    System.out.println("Should be continued if our catch catches the exception");
  }
}

> You must write either catch block or finally block after the 'try' block otherwise it will be considered
  an error;
> For each try block there can be zero or more catch blocks, but only one 'finally' block;
> The catch blocks and finally block  must always appear in conjunction with a try block;
> A try block must be followed by either at least one catch block or one 'finally' block;
> The order exception handlers in the catch block must be from the most specific exception;
> You should write the child exception handler class first then the parent class in catch blocks so it can 
  child to parent otherwise exception will be caught in the parent and the child class catch blocks will never
  be executed;
> So why finally block is there: Because what happens sometimes that if a try block throws an exception and 
  our catch blocks could not able to catch the exception then the default catch will catch the exception and
  our program will be terminated from there so in this situation we can use a 'finally' block which  catches
  the exception if no catch blocks will able to catch the thrown exception or in other words 'finally' catches
  the exception in place of default catch;


>> Our throw and default catch:

> Explicit throw:
                 A program can explicitly throw an exception using the throw statement beside the implicit 
                 exception thrown;

> Syntax: 
         throw <throwableInstance>;

> The exception reference must be of type 'Throwable' class or one of its subclass;
> A detailed message can be passed to the constructor when the exception object is created;

> Our throw and default catch example:

class Example{
  public static void main(String[] args){
    int balance=5000;
    int withdrawlAmount=6000;

    if(balance < withdrawlAmount>)
        throw new ArithmeticException("Insufficient balance");

    balance -= withdrawlAmount;

    System.out.println("Transaction Successfully completed");
    System.out.println("Program continue...");

  }
}

> Our throw and our catch example:

class Example{
  public static void main(String[] args){
    int balance=5000;
    int withdrawlAmount=6000;
    try{

      if(balance < withdrawlAmount>)
        throw new ArithmeticException("Insufficient balance");
      balance -= withdrawlAmount;
      System.out.println("Transaction Successfully completed");
    }
    catch(ArithmeticException e){
      System.out.println("ArithmeticException: "+e.getMessage());
    }
    System.out.println("Program continue...");

  }
}

> Why should we throw an exception object?
  > Because we want to set a different message;
  > Because Java cannot recognize the exceptional situation of business logic;