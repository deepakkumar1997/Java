>> Generics:
> Java Generic methods and generic classes enable programmers to specify, with a single method declaration, a 
  set of related methods or, with a single class declaration, a set of related types;

> Generic Methods:
> We can write a single generic method declaration that can be called with arguments of different types;
e.g.

public class GenericMethodExample{
    public <E> void printArray(E[] arr){
        
        for(E e : arr){
            System.out.println(e);
        }
    }

    public static void main(String[] args){
        GenericMethodExample g = new GenericMethodExample();
        String[] countries = new String[]{"India", "America", "England"};
        Integer numbers[] = {8, 12, 30, 200};
        g.printArray(countries);
        g.printArray(numbers);
    }
}

>> Rules:
> All generic method declarations have a type parameter section delimited by angle brackets(< and >) that 
  precedes the method's return type;
> Each type parameter section contains one or more type parameters separated by commas;
> The type parameters can be used to declare the return type;

>> Important Rule: Type parameters can represent only reference types, not primitive types(like int, double and char);